class TestInvoker{constructor(e,t,s,n=0){this._syncCallback=e,this._asyncCallback=t,this._reportCallback=s,this.waitBeforeSync=n}}export class TimerTestInvoker extends TestInvoker{start(){return new Promise((e=>{setTimeout((()=>{this._syncCallback(),setTimeout((()=>{this._asyncCallback(),requestAnimationFrame((async()=>{const t=await this._reportCallback();e(t)}))}),0)}),this.waitBeforeSync)}))}}class BaseRAFTestInvoker extends TestInvoker{start(){return new Promise((e=>{this.waitBeforeSync?setTimeout((()=>this._scheduleCallbacks(e)),this.waitBeforeSync):this._scheduleCallbacks(e)}))}}export class RAFTestInvoker extends BaseRAFTestInvoker{_scheduleCallbacks(e){requestAnimationFrame((()=>this._syncCallback())),requestAnimationFrame((()=>{setTimeout((()=>{this._asyncCallback(),setTimeout((async()=>{const t=await this._reportCallback();e(t)}),0)}),0)}))}}export class BenchmarkTestStep{constructor(e,t){this.name=e,this.fn=t}run(){this.fn()}async runAsync(e=0){return new Promise((t=>{this.fn(),setTimeout((()=>t()),e)}))}async runAndRecord({params:e,suitename:t,callback:s}){const n=e.waitBeforeSync??0,r=e.measurementMethod??"raf",a=e.warmupBeforeSync??-1,o=`${t}.${this.name}-start`,c=`${t}.${this.name}-sync-end`,i=`${t}.${this.name}-async-start`,m=`${t}.${this.name}-async-end`;let u,l,h;return new("raf"===r?RAFTestInvoker:TimerTestInvoker)((()=>{if(a){performance.mark("warmup-start");const e=performance.now();for(;performance.now()-e<a;)continue;performance.mark("warmup-end")}performance.mark(o);const e=performance.now();this.run();const t=performance.now();performance.mark(c),u=t-e,performance.mark(i),l=performance.now()}),(()=>{const e=document.body.getBoundingClientRect().height,s=performance.now();h=s-l,window._unusedHeightValue=e,performance.mark(m),a&&performance.measure("warmup","warmup-start","warmup-end"),performance.measure(`${t}.${this.name}-sync`,o,c),performance.measure(`${t}.${this.name}-async`,i,m)}),(()=>s({syncTime:u,asyncTime:h})),n).start()}}export class BenchmarkTestSuite{constructor(e,t){this.name=e,this.tests=t}getTestByName(e){return this.tests.find((t=>t.name===e))}run(){for(const e of this.tests)e.run();return{type:"suite-tests-complete",status:"success"}}async runAndRecord({params:e}){const t={tests:{},total:0},s=`suite-${this.name}-start`,n=`suite-${this.name}-end`;performance.mark(s);for(const s of this.tests){const n=await s.runAndRecord({params:e,suitename:this.name,callback:this.record});t.tests[s.name]=n,t.total+=n.total}return performance.mark(n),performance.measure(`suite-${this.name}`,s,n),{type:"suite-tests-complete",status:"success",result:t,suitename:this.name}}record({syncTime:e,asyncTime:t}){return{tests:{Sync:e,Async:t},total:e+t}}}export class BenchmarkTestManager{constructor(e,t){this.name=e,this.suites=t}getSuiteByName(e){return this.suites.find((t=>t.name===e))}run(e){console.log(`Starting tests for ${this.name}`);const t=e?this.suites.filter((t=>e.includes(t.name))):[...this.suites];for(const e of t)console.log(`Starting ${e.name} test.`),e.run(),console.log(`Completed ${e.name} test.`);return`Done with tests for ${this.name}`}async runAsync(e){console.log(`Starting tests for ${this.name}`);const t=e?this.suites.filter((t=>e.includes(t.name))):[...this.suites];for(const e of t)console.log(`Starting ${e.name} test.`),await e.runAsync(),console.log(`Completed ${e.name} test.`);return`Done with tests for ${this.name}`}}export function getParent(e,t){e=e.shadowRoot??e;return t.reduce(((e,t)=>{const s=e.querySelector(t);return s.shadowRoot??s}),e)}export function getElement(e,t=[],s=document){return getParent(s,t).querySelector(e)}export function getAllElements(e,t=[],s=document){return Array.from(getParent(s,t).querySelectorAll(e))}export function forceLayout(){const e=document.body.getBoundingClientRect();return document.elementFromPoint(e.width/2|0,e.height/2|0)}