export class BenchmarkTestStep{constructor(t,e){this.name=t,this.fn=e}run(){this.fn()}async runAsync(t=0){return new Promise((e=>{this.fn(),setTimeout((()=>e()),t)}))}}export class BenchmarkTestSuite{constructor(t,e){this.name=t,this.tests=e}getTestByName(t){return this.tests.find((e=>e.name===t))}run(){for(const t of this.tests)t.run();return{type:"suite-tests-complete",status:"success"}}async runAsync(){for(const t of this.tests)await t.runAsync();return{type:"suite-tests-complete",status:"success"}}}export class BenchmarkTestManager{constructor(t,e){this.name=t,this.suites=e}getSuiteByName(t){return this.suites.find((e=>e.name===t))}run(t){console.log(`Starting tests for ${this.name}`);const e=t?this.suites.filter((e=>t.includes(e.name))):[...this.suites];for(const t of e)console.log(`Starting ${t.name} test.`),t.run(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}async runAsync(t){console.log(`Starting tests for ${this.name}`);const e=t?this.suites.filter((e=>t.includes(e.name))):[...this.suites];for(const t of e)console.log(`Starting ${t.name} test.`),await t.runAsync(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}}export function getParent(t,e){t=t.shadowRoot??t;return e.reduce(((t,e)=>{const s=t.querySelector(e);return s.shadowRoot??s}),t)}export class Page{constructor(t){this.document=t,this.body=t.body}forceLayout(){const t=this.body.getBoundingClientRect();return this.document.elementFromPoint(t.width/2|0,t.height/2|0)}querySelector(t,e=[],s=this.document){const n=getParent(s,e).querySelector(t);return null===n?null:n}querySelectorAll(t,e=[],s=this.document){return Array.from(getParent(s,e).querySelectorAll(t))}}