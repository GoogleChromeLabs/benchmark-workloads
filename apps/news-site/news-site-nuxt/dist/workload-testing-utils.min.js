export class BenchmarkTestStep{constructor(t,e){this.name=t,this.run=e}}export class BenchmarkTestSuite{constructor(t,e){this.name=t,this.tests=e}getTestByName(t){return this.tests.find((e=>e.name===t))}async run(){for(const t of this.tests)t.run();return{type:"suite-tests-complete",status:"success"}}}export class BenchmarkTestManager{constructor(t,e){this.name=t,this.suites=e}getSuiteByName(t){return this.suites.find((e=>e.name===t))}async run(t){console.log(`Starting tests for ${this.name}`);const e=t?this.suites.filter((e=>t.includes(e.name))):[...this.suites];for(const t of e)console.log(`Starting ${t.name} test.`),await t.run(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}}export function runWorkloadTest(t){const e=window.testStepDelay??0;return new Promise((s=>{t(),setTimeout((()=>s()),e)}))}export function forceLayout(){const t=document.body.getBoundingClientRect();return document.elementFromPoint(t.width/2|0,t.height/2|0)}