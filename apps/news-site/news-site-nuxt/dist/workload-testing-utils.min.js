export class BenchmarkTestStep{constructor(t,s){this.name=t,this.fn=s}run(){this.fn()}async runAsync(t=0){return new Promise((s=>{this.fn(),setTimeout((()=>s()),t)}))}}export class BenchmarkTestSuite{constructor(t,s){this.name=t,this.tests=s}getTestByName(t){return this.tests.find((s=>s.name===t))}run(){for(const t of this.tests)t.run();return{type:"suite-tests-complete",status:"success"}}async runAsync(){for(const t of this.tests)await t.runAsync();return{type:"suite-tests-complete",status:"success"}}}export class BenchmarkTestManager{constructor(t,s){this.name=t,this.suites=s}getSuiteByName(t){return this.suites.find((s=>s.name===t))}run(t){console.log(`Starting tests for ${this.name}`);const s=t?this.suites.filter((s=>t.includes(s.name))):[...this.suites];for(const t of s)console.log(`Starting ${t.name} test.`),t.run(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}async runAsync(t){console.log(`Starting tests for ${this.name}`);const s=t?this.suites.filter((s=>t.includes(s.name))):[...this.suites];for(const t of s)console.log(`Starting ${t.name} test.`),await t.runAsync(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}}export function forceLayout(){const t=document.body.getBoundingClientRect();return document.elementFromPoint(t.width/2|0,t.height/2|0)}