export class BenchmarkTestStep{constructor(t,s){this.name=t,this.run=s}}export class BenchmarkTestSuite{constructor(t,s){this.name=t,this.tests=s}async run(){for(const t of this.tests)await t.run();return"done"}}export class BenchmarkTestManager{constructor(t,s){this.name=t,this.suites=s}async run(t){console.log(`Starting tests for ${this.name}`);const s=t?this.suites.filter((s=>t.includes(s.name))):[...this.suites];for(const t of s)console.log(`Starting ${t.name} test.`),await t.run(),console.log(`Completed ${t.name} test.`);return`Done with tests for ${this.name}`}}export function runWorkloadTest(t){const s=window.testStepDelay??0;return new Promise((e=>{t(),setTimeout((()=>e()),s)}))}